var Default = (function () {
  'use strict';

  class Faq {
    
    constructor(settings) {
      this.settings = {
        selector: (settings) ? settings.selector : Faq.selector
      };

      const faqs = document.querySelectorAll(`${this.settings.selector}`);
      if (faqs) {
        
        Array.prototype.forEach.call(faqs, function (faq) {

          faq.addEventListener('click', function () {
            Faq.toggle(this);
          }, false);

        });
      }
    }
  }

  /**
   * Toggles the answer for FAQ
   * @param {obj} faq 
   */
  Faq.toggle = function(faq) {

    // Toggle the Open and Close spans
    Array.from(faq.getElementsByTagName("span")).forEach(function(el){
      el.classList.toggle('hidden');
    });

    // Toggle the body
    let sibling = faq.parentNode.previousElementSibling;

    if (sibling.getAttribute('aria-hidden') == 'true') {
      sibling.setAttribute("aria-hidden", "false");
    } else {
      sibling.setAttribute("aria-hidden", "true");
    }

    sibling.classList.toggle('hidden');

  };

  /** @param  {String}  selector  The main selector for the pattern */
  Faq.selector = '[js-trigger*="faq"]';

  class Pagination {
    constructor() {
      this.settings = {
        trigger: Pagination.trigger,
        hash: window.location.hash
      };

      const triggers = document.querySelectorAll(`${this.settings.trigger}`);
      if (triggers) {
        
        // initialize click events
        Array.prototype.forEach.call(triggers, function (t) {
          t.addEventListener('click', function () {
            Pagination.toggle(this);
          }, false);
        });

        // check the hash
        if (this.settings.hash) {
          const el = document.querySelector(`[href="${this.settings.hash}"]`);
          Pagination.toggle(el);
        }

      } else {
        return;
      }
    }
  }

  Pagination.toggle = function(element){

    // toggle active class on side navigation
    const children = Array.from(element.parentNode.children);

    children.forEach(function(child){
      child.classList.remove('active');
    });

    element.classList.toggle('active');

    // toggle sections
    const active_section = document.querySelector(`${element.getAttribute('href')}`);
    const children_sections = Array.from(active_section.parentNode.children);
    
    children_sections.forEach(function (child) {
      if (child.tagName == 'SECTION'){
        child.classList.add('hidden');
      }
    });

    active_section.classList.remove('hidden');
  };

  /** @param  {String}  selector  The main selector for the pattern */
  Pagination.trigger = '[data-trigger="paginate"]';

  /**
   * Methods for the main Patterns instance.
   */
  class Default {
    constructor() {
      console.dir('@pttrn Development Mode'); // eslint-disable-line no-console
    }

    faq() {
      return new Faq();
    }

    pagination() {
      return new Pagination();
    }
  }

  return Default;

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
