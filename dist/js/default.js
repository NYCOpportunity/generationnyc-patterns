var Default = (function () {
  'use strict';

  class Faq {
    
    constructor(settings) {

      this.settings = {
        selector: (settings) ? settings.selector : Faq.selector
      };

      const faqs = document.querySelectorAll(`${this.settings.selector}`);
      if (faqs) {
        
        Array.prototype.forEach.call(faqs, function (faq) {

          faq.addEventListener('click', function () {
            Faq.toggle(this);
          }, false);

        });
      }
    }
  }

  /**
   * Toggles the answer for FAQ
   * @param {obj} faq 
   */
  Faq.toggle = function(faq) {

    // Toggle the Open and Close spans
    Array.from(faq.getElementsByTagName("span")).forEach(function(el){
      el.classList.toggle('hidden');
    });

    // Toggle the body
    let sibling = faq.parentNode.previousElementSibling;

    if (sibling.getAttribute('aria-hidden') == 'true') {
      sibling.setAttribute("aria-hidden", "false");
    } else {
      sibling.setAttribute("aria-hidden", "true");
    }

    sibling.classList.toggle('hidden');

  };

  /** @param  {String}  selector  The main selector for the pattern */
  Faq.selector = '[js-trigger*="faq"]';

  // import {{ Pattern }} from '../{{ type }}/{{ pattern }}/{{ pattern }}';
  /** import pattern modules here as they are written */

  /**
   * Methods for the main Patterns instance.
   */
  class Default {
    constructor() {
      console.dir('@pttrn Development Mode'); // eslint-disable-line no-console
    }

    faq() {
      return new Faq();
    }
  }

  return Default;

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbXBvbmVudHMvZmFxLWNhcmQvZmFxLWNhcmQuanMiLCIuLi8uLi9zcmMvanMvZGVmYXVsdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNsYXNzIEZhcSB7XG4gIFxuICBjb25zdHJ1Y3RvcihzZXR0aW5ncykge1xuXG4gICAgdGhpcy5zZXR0aW5ncyA9IHtcbiAgICAgIHNlbGVjdG9yOiAoc2V0dGluZ3MpID8gc2V0dGluZ3Muc2VsZWN0b3IgOiBGYXEuc2VsZWN0b3JcbiAgICB9O1xuXG4gICAgY29uc3QgZmFxcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYCR7dGhpcy5zZXR0aW5ncy5zZWxlY3Rvcn1gKTtcbiAgICBpZiAoZmFxcykge1xuICAgICAgXG4gICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGZhcXMsIGZ1bmN0aW9uIChmYXEpIHtcblxuICAgICAgICBmYXEuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgRmFxLnRvZ2dsZSh0aGlzKTtcbiAgICAgICAgfSwgZmFsc2UpO1xuXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBUb2dnbGVzIHRoZSBhbnN3ZXIgZm9yIEZBUVxuICogQHBhcmFtIHtvYmp9IGZhcSBcbiAqL1xuRmFxLnRvZ2dsZSA9IGZ1bmN0aW9uKGZhcSkge1xuXG4gIC8vIFRvZ2dsZSB0aGUgT3BlbiBhbmQgQ2xvc2Ugc3BhbnNcbiAgQXJyYXkuZnJvbShmYXEuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzcGFuXCIpKS5mb3JFYWNoKGZ1bmN0aW9uKGVsKXtcbiAgICBlbC5jbGFzc0xpc3QudG9nZ2xlKCdoaWRkZW4nKTtcbiAgfSlcblxuICAvLyBUb2dnbGUgdGhlIGJvZHlcbiAgbGV0IHNpYmxpbmcgPSBmYXEucGFyZW50Tm9kZS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuXG4gIGlmIChzaWJsaW5nLmdldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKSA9PSAndHJ1ZScpIHtcbiAgICBzaWJsaW5nLnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsIFwiZmFsc2VcIik7XG4gIH0gZWxzZSB7XG4gICAgc2libGluZy5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLCBcInRydWVcIik7XG4gIH1cblxuICBzaWJsaW5nLmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicpO1xuXG59XG5cbi8qKiBAcGFyYW0gIHtTdHJpbmd9ICBzZWxlY3RvciAgVGhlIG1haW4gc2VsZWN0b3IgZm9yIHRoZSBwYXR0ZXJuICovXG5GYXEuc2VsZWN0b3IgPSAnW2pzLXRyaWdnZXIqPVwiZmFxXCJdJztcblxuZXhwb3J0IGRlZmF1bHQgRmFxOyIsIid1c2Ugc3RyaWN0JztcbmltcG9ydCBGYXEgZnJvbSAnLi4vY29tcG9uZW50cy9mYXEtY2FyZC9mYXEtY2FyZCc7XG5cblxuLy8gaW1wb3J0IHt7IFBhdHRlcm4gfX0gZnJvbSAnLi4ve3sgdHlwZSB9fS97eyBwYXR0ZXJuIH19L3t7IHBhdHRlcm4gfX0nO1xuLyoqIGltcG9ydCBwYXR0ZXJuIG1vZHVsZXMgaGVyZSBhcyB0aGV5IGFyZSB3cml0dGVuICovXG5cbi8qKlxuICogTWV0aG9kcyBmb3IgdGhlIG1haW4gUGF0dGVybnMgaW5zdGFuY2UuXG4gKi9cbmNsYXNzIERlZmF1bHQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT0gJ3Byb2R1Y3Rpb24nKVxuICAgICAgY29uc29sZS5kaXIoJ0BwdHRybiBEZXZlbG9wbWVudCBNb2RlJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICB9XG5cbiAgZmFxKCkge1xuICAgIHJldHVybiBuZXcgRmFxKCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRGVmYXVsdDtcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7RUFFQSxNQUFNLEdBQUcsQ0FBQztFQUNWO0VBQ0EsRUFBRSxXQUFXLENBQUMsUUFBUSxFQUFFO0FBQ3hCO0VBQ0EsSUFBSSxJQUFJLENBQUMsUUFBUSxHQUFHO0VBQ3BCLE1BQU0sUUFBUSxFQUFFLENBQUMsUUFBUSxJQUFJLFFBQVEsQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLFFBQVE7RUFDN0QsS0FBSyxDQUFDO0FBQ047RUFDQSxJQUFJLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDeEUsSUFBSSxJQUFJLElBQUksRUFBRTtFQUNkO0VBQ0EsTUFBTSxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFVBQVUsR0FBRyxFQUFFO0FBQ3hEO0VBQ0EsUUFBUSxHQUFHLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFlBQVk7RUFDbEQsVUFBVSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0VBQzNCLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNsQjtFQUNBLE9BQU8sQ0FBQyxDQUFDO0VBQ1QsS0FBSztFQUNMLEdBQUc7RUFDSCxDQUFDO0FBQ0Q7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLEdBQUcsQ0FBQyxNQUFNLEdBQUcsU0FBUyxHQUFHLEVBQUU7QUFDM0I7RUFDQTtFQUNBLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUM7RUFDbkUsSUFBSSxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztFQUNsQyxHQUFHLEVBQUM7QUFDSjtFQUNBO0VBQ0EsRUFBRSxJQUFJLE9BQU8sR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLHNCQUFzQixDQUFDO0FBQ3REO0VBQ0EsRUFBRSxJQUFJLE9BQU8sQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLElBQUksTUFBTSxFQUFFO0VBQ3JELElBQUksT0FBTyxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7RUFDakQsR0FBRyxNQUFNO0VBQ1QsSUFBSSxPQUFPLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQztFQUNoRCxHQUFHO0FBQ0g7RUFDQSxFQUFFLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3JDO0VBQ0EsRUFBQztBQUNEO0VBQ0E7RUFDQSxHQUFHLENBQUMsUUFBUSxHQUFHLHFCQUFxQjs7RUM3Q3BDO0VBQ0E7QUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLE1BQU0sT0FBTyxDQUFDO0VBQ2QsRUFBRSxXQUFXLEdBQUc7RUFDaEIsSUFDTSxPQUFPLENBQUMsR0FBRyxDQUFDLHlCQUF5QixDQUFDLENBQUM7RUFDN0MsR0FBRztBQUNIO0VBQ0EsRUFBRSxHQUFHLEdBQUc7RUFDUixJQUFJLE9BQU8sSUFBSSxHQUFHLEVBQUUsQ0FBQztFQUNyQixHQUFHO0VBQ0g7Ozs7Ozs7OyJ9
